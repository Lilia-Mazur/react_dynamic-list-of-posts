{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/Loader/Loader.tsx","api/posts.ts","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectPostId","onSelectedPostId","className","map","post","userId","title","type","classNames","id","onClick","BASE_URL","getPostComments","postId","a","fetch","response","json","addPostComment","comment","method","headers","body","JSON","stringify","NewCommentForm","selectedId","setComments","useState","newCommentName","setNewCommentName","newCommentEmail","setNewCommentEmail","newCommentBody","setNewCommentBady","handleSubmit","event","preventDefault","name","email","updateComments","onSubmit","placeholder","value","onChange","target","required","Loader","getUsersPosts","getPostDetails","PostDetails","selectedPostId","findPost","setFindPost","comments","visibleComments","setVisibleComments","commentsError","setCommentsError","useEffect","then","postDetails","getAllComments","commentsFromServer","length","deleteComment","useCallback","deleteId","commentId","filteredComments","filter","getUsers","App","setSelectedPostId","selectedUserId","setSelectedUserId","users","setUsers","setPosts","usersFromServer","postsFromServer","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec60a994.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  selectPostId: number;\n  onSelectedPostId: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectPostId, onSelectedPostId,\n}) => (\n  <div\n    className=\"PostsList\"\n    data-cy=\"postList\"\n  >\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          className=\"PostsList__item\"\n          key={post.id}\n        >\n          <div>\n            <b>{`[User #${post.userId}]:`}</b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className={classNames('PostsList__button', 'button', {\n              'PostsList__button--active': selectPostId === post.id,\n            })}\n            onClick={() => (\n              selectPostId === post.id\n                ? onSelectedPostId(0)\n                : onSelectedPostId(post.id)\n            )}\n          >\n            {selectPostId === post.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { Comment, NewComment } from '../react-app-env';\nimport { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number): Promise<Comment []> => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deletePostComment = (commentId: number) => {\n  fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addPostComment = async (comment: NewComment) => {\n  const response = await fetch(`${BASE_URL}/comments`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify(comment),\n    });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addPostComment, getPostComments } from '../../api/comments';\nimport { NewComment } from '../../react-app-env';\n\ninterface Props {\n  selectedId: number;\n  setComments: (comments: NewComment[]) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedId,\n  setComments,\n}) => {\n  const [newCommentName, setNewCommentName] = useState('');\n  const [newCommentEmail, setNewCommentEmail] = useState('');\n  const [newCommentBody, setNewCommentBady] = useState('');\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const comment: NewComment = {\n      postId: selectedId,\n      name: newCommentName,\n      email: newCommentEmail,\n      body: newCommentBody,\n    };\n\n    await addPostComment(comment);\n\n    const updateComments = await getPostComments(selectedId);\n\n    setComments(updateComments);\n    setNewCommentName('');\n    setNewCommentEmail('');\n    setNewCommentBady('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newCommentName}\n          onChange={event => setNewCommentName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newCommentEmail}\n          onChange={event => setNewCommentEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newCommentBody}\n          onChange={event => setNewCommentBady(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Post } from '../react-app-env';\nimport { BASE_URL } from './api';\n\nexport const getUsersPosts = async (userId: number): Promise<Post[]> => {\n  let response;\n\n  if (!userId) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deletePostComment } from '../../api/comments';\nimport { Post, Comment } from '../../react-app-env';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [findPost, setFindPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment []>([]);\n  const [visibleComments, setVisibleComments] = useState(false);\n  const [commentsError, setCommentsError] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(postDetails => setFindPost(postDetails));\n    setVisibleComments(false);\n    setCommentsError(false);\n  }, [selectedPostId]);\n\n  const getAllComments = async () => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    if (commentsFromServer.length === 0) {\n      setComments([]);\n      setCommentsError(true);\n    } else {\n      setComments(commentsFromServer);\n      setCommentsError(false);\n    }\n  };\n\n  const showComments = () => {\n    if (visibleComments) {\n      setComments([]);\n      setVisibleComments(false);\n      setCommentsError(false);\n    } else {\n      getAllComments();\n      setVisibleComments(true);\n    }\n  };\n\n  const deleteComment = useCallback(async (deleteId: number) => {\n    await deletePostComment(deleteId);\n    const filteredComments = [...comments].filter(\n      comment => comment.id !== deleteId,\n    );\n\n    setComments(filteredComments);\n  }, [comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{findPost?.body}</p>\n      </section>\n\n      {findPost ? (\n        <section\n          className=\"PostDetails__comments\"\n          data-cy=\"postDetails\"\n        >\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => showComments()}\n          >\n            {visibleComments ? 'Hide comments' : 'Show comments'}\n          </button>\n          {visibleComments && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    onClick={() => deleteComment(comment.id)}\n                    className=\"PostDetails__remove-button button\"\n                  >\n                    X\n                  </button>\n                  <p>\n                    {comment.body}\n                  </p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      ) : (\n        <Loader />\n      )}\n\n      {commentsError && (\n        <p className=\"PostDetails__comments--notFound\">\n          There are no comments yet.\n        </p>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedId={selectedPostId}\n            setComments={getAllComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\nimport { User } from '../react-app-env';\n\nexport const getUsers = async (): Promise<User[]> => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\nimport { Post, User } from './react-app-env';\nimport { getUsersPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n\n    getUsersPosts(selectedUserId)\n      .then(postsFromServer => setPosts(postsFromServer));\n  }, [selectedUserId]);\n\n  const setPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectPostId={selectedPostId}\n            onSelectedPostId={setPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}